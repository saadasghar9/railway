To help you make the transition from v2.x to v3.0, we’ve uploaded the old
website tov2.spacy.io. To see what’s changed
and how to migrate, see thev3.0 guide. spaCy is compatible with64-bit CPython 3.7+and runs onUnix/Linux,macOS/OS XandWindows. The latest spaCy releases are available overpipandconda. Using pip, spaCy releases are available as source packages and binary wheels.
Before you install spaCy and its dependencies, make sure that yourpip,setuptoolsandwheelare up to date. After installation you typically want to download a trained pipeline. For more
info and available packages, see themodels directory. When using pip it is generally recommended to install packages in a virtual
environment to avoid modifying system state: spaCy also lets you install extra dependencies by specifying the following
keywords in brackets, e.g.spacy[ja]orspacy[lookups,transformers](with
multiple comma-separated extras). See the[options.extras_require]section in
spaCy’ssetup.cfgfor details on what’s included. Thanks to our great community, we’ve been able to re-add conda support. You can
also install spaCy viaconda-forge: For the feedstock including the build recipe and configuration, check outthis repository. Note that we
currently don’t publish anypre-releaseson conda. Although we’ve tried to keep breaking changes to a minimum, upgrading from
spaCy v2.x to v3.x may still require some changes to your code base. For
details see the sections onbackwards incompatibilitiesandmigrating. Also remember to download the new
trained pipelines, and retrain your own pipelines. When updating to a newer version of spaCy, it’s generally recommended to start
with a clean virtual environment. If you’re upgrading to a new major version,
make sure you have the latestcompatible trained pipelinesinstalled, and
that there are no old and incompatible packages left over in your environment,
as this can often lead to unexpected results and errors. If you’ve trained your
own models, keep in mind that your train and runtime inputs must match. This
means you’ll have toretrain your pipelineswith the new version. spaCy also provides avalidatecommand, which lets you
verify that all installed pipeline packages are compatible with your spaCy
version. If incompatible packages are found, tips and installation instructions
are printed. It’s recommended to run the command withpython -mto make sure
you’re executing the correct version of spaCy. As of v2.0, spaCy comes with neural network models that are implemented in our
machine learning library,Thinc. For GPU support, we’ve been
grateful to use the work of Chainer’sCuPymodule,
which provides a numpy-compatible interface for GPU arrays. spaCy can be installed for a CUDA-compatible GPU by specifyingspacy[cuda],spacy[cuda102],spacy[cuda112],spacy[cuda113], etc. If you know your CUDA
version, using the more explicit specifier allows CuPy to be installed via
wheel, saving some compilation time. The specifiers should installcupy. Once you have a GPU-enabled installation, the best way to activate it is to callspacy.prefer_gpuorspacy.require_gpu()somewhere in your
script before any pipelines have been loaded.require_gpuwill raise an error
if no GPU is available. The other way to install spaCy is to clone itsGitHub repositoryand build it from
source. That is the common way if you want to make changes to the code base.
You’ll need to make sure that you have a development environment consisting of a
Python distribution including header files, a compiler,pipandgitinstalled.
The compiler part is the trickiest. How to do that depends on your system. See
notes onUbuntu,macOS / OS XandWindowsfor details. To install with extras: How to install compilers and related build tools: If you install spaCy from source or withpipfor platforms where there are not
binary wheels on PyPI, you may need to use build constraints if any package in
your environment requires an older version ofnumpy. Ifnumpygets downgraded from the most recent release at any point after
you’ve compiledspacy, you might see an error that looks like this: To fix this, create a new virtual environment and installspacyand all of its
dependencies using build constraints.Build constraintsspecify an older version ofnumpythat is only used while compilingspacy,
and then your runtime environment can use any newer version ofnumpyand still
be compatible. In addition, use--no-cache-dirto ignore any previously cached
wheels so that all relevant packages are recompiled from scratch: Our build constraints currently specify the oldest supportednumpyavailable
on PyPI forx86_64andaarch64. Depending on your platform and environment,
you may want to customize the specific versions ofnumpy. For other platforms,
you can have a look at SciPy’soldest-supported-numpypackage to see what the oldest recommended versions ofnumpyare. (Warning: don’t usepip install -c constraints.txtinstead ofPIP_CONSTRAINT, since this isn’t applied to the isolated build environments.) Some additional options may be useful for spaCy developers who are editing the
source code and recompiling frequently. Install in editable mode. Changes to.pyfiles will be reflected as soon as
the files are saved, but edits to Cython files (.pxd,.pyx) will require
thepip installcommand below to be run again. Before installing in editable
mode, be sure you have removed any previous installs withpip uninstall spacy, which you may need to run multiple times to remove all
traces of earlier installs. Build in parallel. Starting in v3.4.0, you can specify the number of build
jobs with the environment variableSPACY_NUM_BUILD_JOBS: For editable mode and parallel builds withpython setup.pyinstead ofpip(no longer recommended): ThespaCy VSCode Extensionprovides
additional tooling and features for working with spaCy’s config files. Version
1.0.0 includes hover descriptions for registry functions, variables, and section
names within the config as an installable extension. The spaCy repository includes aMakefilethat
builds an executable zip file usingpex(PythonExecutable). The executable includes spaCy and all its package
dependencies and only requires the system Python at runtime. Building an
executable.pexfile is often the most convenient way to deploy spaCy, as it
lets you separate the build from the deployment process. To use a.pexfile, just replacepythonwith the path to the file when you
execute your code or CLI commands. This is equivalent to running Python in a
virtual environment with spaCy installed. You can configure the build process with the following environment variables: spaCy comes with anextensive test suite. In order
to run the tests, you’ll usually want to clone therepositoryandbuild spaCy from source. This will also install the required
development dependencies and test utilities defined in therequirements.txt. Alternatively, you can find out where spaCy is installed and runpyteston
that directory. Don’t forget to also install the test utilities via spaCy’srequirements.txt: Callingpyteston the spaCy directory will run only the basic tests. The flag--slowis optional and enables additional tests that take longer. This section collects some of the most common errors you may come across when
installing, loading and using spaCy, as well as their solutions. Also see theDiscussions FAQ Thread,
which is updated more frequently and covers more transitory issues. Did you come across a problem like the ones listed here and want to share the
solution? You can find the “Suggest edits” button at the bottom of this page
that points you to the source. We always appreciatepull requests! This usually means that the trained pipeline you’re trying to download does not
exist, or isn’t available for your version of spaCy. Check thecompatibility tableto see which packages are available for your spaCy version. If you’re using an
old version, consider upgrading to the latest release. Note that while spaCy
supports tokenization fora variety of languages, not
all of them come with trained pipelines. To only use the tokenizer, import the
language’sLanguageclass instead, for examplefrom spacy.lang.fr import French. This error means that the spaCy module can’t be located on your system, or in
your environment. Make sure you have spaCy installed. If you’re using a virtual
environment, make sure it’s activated and check that spaCy is installed in that
environment – otherwise, you’re trying to load a system installation. You can
also runwhich pythonto find out where your Python executable is located. As of spaCy v1.7, all trained pipelines can be installed as Python packages.
This means that they’ll become importable modules of your application. If this
fails, it’s usually a sign that the package is not installed in the current
environment. Runpip listorpip freezeto check which pipeline packages you
have installed, and install thecorrect packageif necessary. If
you’re importing a package manually at the top of a file, make sure to use the
full name of the package. This error may occur when running thespacycommand from the command line.
spaCy does not currently add an entry to yourPATHenvironment variable, as
this can lead to unexpected results, especially when using a virtual
environment. Instead, spaCy adds an auto-alias that mapsspacytopython -m spacy. If this is not working as expected, run the command withpython -m, yourself – for examplepython -m spacy download en_core_web_sm.
For more info on this, see thedownloadcommand. While this could technically have many causes, including spaCy being broken, the
most likely one is that your script’s file or directory name is “shadowing” the
module – e.g. your file is calledspacy.py, or a directory you’re importing
from is calledspacy. So, when using spaCy, never call anything elsespacy. If your training data only contained new entities and you didn’t mix in any
examples the model previously recognized, it can cause the model to “forget”
what it had previously learned. This is also referred to as the “catastrophic
forgetting problem”. A solution is to pre-label some text, and mix it with the
new text in your updates. You can also do this by running spaCy over some text,
extracting a bunch of entities the model previously recognized correctly, and
adding them to your training examples. If you’re training models, writing them to disk, and versioning them with git,
you might encounter this error when trying to load them in a Windows
environment. This happens because a default install of Git for Windows is
configured to automatically convert Unix-style end-of-line characters (LF) to
Windows-style ones (CRLF) during file checkout (and the reverse when
committing). While that’s mostly fine for text files, a trained model written to
disk has some binary files that should not go through this conversion. When they
do, you get the error above. You can fix it by either changing yourcore.autocrlfsetting to"false", or by committing a.gitattributesfile to your
repository to tell Git on which files or folders it shouldn’t do LF-to-CRLF
conversion, with an entry likepath/to/spacy/model/** -text. After you’ve done
either of these, clone your repository again. Please see thereleases pageinstead.